# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
This documentation was automatically generated using original comments in
Doxygen format. As some C types and data structures cannot be directly mapped
into Python types, some non-trivial type conversion could have place.
Basically a type is replaced with another one that has the closest match, and
sometimes one argument of generated function comprises several arguments of the
original function (usually two).

Functions having error code as the return value and returning effective
value in one of its arguments are transformed so that the effective value is
returned in a regular fashion and run-time exception is being thrown in case of
negative error code.
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_soundswallower')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_soundswallower')
    _soundswallower = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_soundswallower', [dirname(__file__)])
        except ImportError:
            import _soundswallower
            return _soundswallower
        try:
            _mod = imp.load_module('_soundswallower', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _soundswallower = swig_import_helper()
    del swig_import_helper
else:
    import _soundswallower
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Hypothesis(_object):
    """Proxy of C Hypothesis struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hypothesis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hypothesis, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hypstr"] = _soundswallower.Hypothesis_hypstr_set
    __swig_getmethods__["hypstr"] = _soundswallower.Hypothesis_hypstr_get
    if _newclass:
        hypstr = _swig_property(_soundswallower.Hypothesis_hypstr_get, _soundswallower.Hypothesis_hypstr_set)
    __swig_setmethods__["best_score"] = _soundswallower.Hypothesis_best_score_set
    __swig_getmethods__["best_score"] = _soundswallower.Hypothesis_best_score_get
    if _newclass:
        best_score = _swig_property(_soundswallower.Hypothesis_best_score_get, _soundswallower.Hypothesis_best_score_set)
    __swig_setmethods__["prob"] = _soundswallower.Hypothesis_prob_set
    __swig_getmethods__["prob"] = _soundswallower.Hypothesis_prob_get
    if _newclass:
        prob = _swig_property(_soundswallower.Hypothesis_prob_get, _soundswallower.Hypothesis_prob_set)

    def __init__(self, hypstr, best_score, prob):
        """__init__(Hypothesis self, char const * hypstr, int best_score, int prob) -> Hypothesis"""
        this = _soundswallower.new_Hypothesis(hypstr, best_score, prob)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _soundswallower.delete_Hypothesis
    __del__ = lambda self: None
Hypothesis_swigregister = _soundswallower.Hypothesis_swigregister
Hypothesis_swigregister(Hypothesis)

class Segment(_object):
    """Proxy of C Segment struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Segment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Segment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["word"] = _soundswallower.Segment_word_set
    __swig_getmethods__["word"] = _soundswallower.Segment_word_get
    if _newclass:
        word = _swig_property(_soundswallower.Segment_word_get, _soundswallower.Segment_word_set)
    __swig_setmethods__["ascore"] = _soundswallower.Segment_ascore_set
    __swig_getmethods__["ascore"] = _soundswallower.Segment_ascore_get
    if _newclass:
        ascore = _swig_property(_soundswallower.Segment_ascore_get, _soundswallower.Segment_ascore_set)
    __swig_setmethods__["lscore"] = _soundswallower.Segment_lscore_set
    __swig_getmethods__["lscore"] = _soundswallower.Segment_lscore_get
    if _newclass:
        lscore = _swig_property(_soundswallower.Segment_lscore_get, _soundswallower.Segment_lscore_set)
    __swig_setmethods__["lback"] = _soundswallower.Segment_lback_set
    __swig_getmethods__["lback"] = _soundswallower.Segment_lback_get
    if _newclass:
        lback = _swig_property(_soundswallower.Segment_lback_get, _soundswallower.Segment_lback_set)
    __swig_setmethods__["prob"] = _soundswallower.Segment_prob_set
    __swig_getmethods__["prob"] = _soundswallower.Segment_prob_get
    if _newclass:
        prob = _swig_property(_soundswallower.Segment_prob_get, _soundswallower.Segment_prob_set)
    __swig_setmethods__["start_frame"] = _soundswallower.Segment_start_frame_set
    __swig_getmethods__["start_frame"] = _soundswallower.Segment_start_frame_get
    if _newclass:
        start_frame = _swig_property(_soundswallower.Segment_start_frame_get, _soundswallower.Segment_start_frame_set)
    __swig_setmethods__["end_frame"] = _soundswallower.Segment_end_frame_set
    __swig_getmethods__["end_frame"] = _soundswallower.Segment_end_frame_get
    if _newclass:
        end_frame = _swig_property(_soundswallower.Segment_end_frame_get, _soundswallower.Segment_end_frame_set)

    def fromIter(itor):
        """fromIter(void * itor) -> Segment"""
        return _soundswallower.Segment_fromIter(itor)

    fromIter = staticmethod(fromIter)
    __swig_destroy__ = _soundswallower.delete_Segment
    __del__ = lambda self: None

    def __init__(self):
        """__init__(Segment self) -> Segment"""
        this = _soundswallower.new_Segment()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Segment_swigregister = _soundswallower.Segment_swigregister
Segment_swigregister(Segment)

def Segment_fromIter(itor):
    """Segment_fromIter(void * itor) -> Segment"""
    return _soundswallower.Segment_fromIter(itor)

class NBest(_object):
    """Proxy of C NBest struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NBest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NBest, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hypstr"] = _soundswallower.NBest_hypstr_set
    __swig_getmethods__["hypstr"] = _soundswallower.NBest_hypstr_get
    if _newclass:
        hypstr = _swig_property(_soundswallower.NBest_hypstr_get, _soundswallower.NBest_hypstr_set)
    __swig_setmethods__["score"] = _soundswallower.NBest_score_set
    __swig_getmethods__["score"] = _soundswallower.NBest_score_get
    if _newclass:
        score = _swig_property(_soundswallower.NBest_score_get, _soundswallower.NBest_score_set)

    def fromIter(itor):
        """fromIter(void * itor) -> NBest"""
        return _soundswallower.NBest_fromIter(itor)

    fromIter = staticmethod(fromIter)

    def hyp(self):
        """hyp(NBest self) -> Hypothesis"""
        return _soundswallower.NBest_hyp(self)

    __swig_destroy__ = _soundswallower.delete_NBest
    __del__ = lambda self: None

    def __init__(self):
        """__init__(NBest self) -> NBest"""
        this = _soundswallower.new_NBest()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
NBest_swigregister = _soundswallower.NBest_swigregister
NBest_swigregister(NBest)

def NBest_fromIter(itor):
    """NBest_fromIter(void * itor) -> NBest"""
    return _soundswallower.NBest_fromIter(itor)

class Config(_object):
    """Proxy of C Config struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _soundswallower.delete_Config
    __del__ = lambda self: None

    def set_boolean(self, key, val):
        """set_boolean(Config self, char const * key, bool val)"""
        return _soundswallower.Config_set_boolean(self, key, val)


    def set_int(self, key, val):
        """set_int(Config self, char const * key, int val)"""
        return _soundswallower.Config_set_int(self, key, val)


    def set_float(self, key, val):
        """set_float(Config self, char const * key, double val)"""
        return _soundswallower.Config_set_float(self, key, val)


    def set_string(self, key, val):
        """set_string(Config self, char const * key, char const * val)"""
        return _soundswallower.Config_set_string(self, key, val)


    def set_string_extra(self, key, val):
        """set_string_extra(Config self, char const * key, char const * val)"""
        return _soundswallower.Config_set_string_extra(self, key, val)


    def exists(self, key):
        """exists(Config self, char const * key) -> bool"""
        return _soundswallower.Config_exists(self, key)


    def get_boolean(self, key):
        """get_boolean(Config self, char const * key) -> bool"""
        return _soundswallower.Config_get_boolean(self, key)


    def get_int(self, key):
        """get_int(Config self, char const * key) -> int"""
        return _soundswallower.Config_get_int(self, key)


    def get_float(self, key):
        """get_float(Config self, char const * key) -> double"""
        return _soundswallower.Config_get_float(self, key)


    def get_string(self, key):
        """get_string(Config self, char const * key) -> char const *"""
        return _soundswallower.Config_get_string(self, key)

Config_swigregister = _soundswallower.Config_swigregister
Config_swigregister(Config)

class FrontEnd(_object):
    """Proxy of C FrontEnd struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrontEnd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrontEnd, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(FrontEnd self) -> FrontEnd"""
        this = _soundswallower.new_FrontEnd()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _soundswallower.delete_FrontEnd
    __del__ = lambda self: None

    def output_size(self):
        """output_size(FrontEnd self) -> int"""
        return _soundswallower.FrontEnd_output_size(self)


    def process_utt(self, spch, nsamps, cep_block):
        """process_utt(FrontEnd self, char * spch, size_t nsamps, mfcc_t *** cep_block) -> int"""
        return _soundswallower.FrontEnd_process_utt(self, spch, nsamps, cep_block)

FrontEnd_swigregister = _soundswallower.FrontEnd_swigregister
FrontEnd_swigregister(FrontEnd)

class Feature(_object):
    """Proxy of C Feature struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Feature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Feature, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _soundswallower.delete_Feature
    __del__ = lambda self: None

    def __init__(self):
        """__init__(Feature self) -> Feature"""
        this = _soundswallower.new_Feature()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Feature_swigregister = _soundswallower.Feature_swigregister
Feature_swigregister(Feature)

class FsgModel(_object):
    """Proxy of C FsgModel struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsgModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FsgModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FsgModel self, char const * name, LogMath logmath, float lw, int n) -> FsgModel
        __init__(FsgModel self, char const * path, LogMath logmath, float lw) -> FsgModel
        """
        this = _soundswallower.new_FsgModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _soundswallower.delete_FsgModel
    __del__ = lambda self: None

    def word_id(self, word):
        """word_id(FsgModel self, char const * word) -> int"""
        return _soundswallower.FsgModel_word_id(self, word)


    def word_str(self, wid):
        """word_str(FsgModel self, int wid) -> char const *"""
        return _soundswallower.FsgModel_word_str(self, wid)


    def word_add(self, word):
        """word_add(FsgModel self, char const * word) -> int"""
        return _soundswallower.FsgModel_word_add(self, word)


    def trans_add(self, src, dst, logp, wid):
        """trans_add(FsgModel self, int src, int dst, int logp, int wid)"""
        return _soundswallower.FsgModel_trans_add(self, src, dst, logp, wid)


    def null_trans_add(self, src, dst, logp):
        """null_trans_add(FsgModel self, int src, int dst, int logp) -> int"""
        return _soundswallower.FsgModel_null_trans_add(self, src, dst, logp)


    def tag_trans_add(self, src, dst, logp, wid):
        """tag_trans_add(FsgModel self, int src, int dst, int logp, int wid) -> int"""
        return _soundswallower.FsgModel_tag_trans_add(self, src, dst, logp, wid)


    def add_silence(self, silword, state, silprob):
        """add_silence(FsgModel self, char const * silword, int state, float silprob) -> int"""
        return _soundswallower.FsgModel_add_silence(self, silword, state, silprob)


    def add_alt(self, baseword, altword):
        """add_alt(FsgModel self, char const * baseword, char const * altword) -> int"""
        return _soundswallower.FsgModel_add_alt(self, baseword, altword)


    def writefile(self, path):
        """writefile(FsgModel self, char const * path)"""
        return _soundswallower.FsgModel_writefile(self, path)


    def writefile_fsm(self, path):
        """writefile_fsm(FsgModel self, char const * path)"""
        return _soundswallower.FsgModel_writefile_fsm(self, path)


    def writefile_symtab(self, path):
        """writefile_symtab(FsgModel self, char const * path)"""
        return _soundswallower.FsgModel_writefile_symtab(self, path)


    def get_final_state(self):
        """get_final_state(FsgModel self) -> int"""
        return _soundswallower.FsgModel_get_final_state(self)


    def set_final_state(self, state):
        """set_final_state(FsgModel self, int state)"""
        return _soundswallower.FsgModel_set_final_state(self, state)


    def get_start_state(self):
        """get_start_state(FsgModel self) -> int"""
        return _soundswallower.FsgModel_get_start_state(self)


    def set_start_state(self, state):
        """set_start_state(FsgModel self, int state)"""
        return _soundswallower.FsgModel_set_start_state(self, state)


    def log(self, logp):
        """log(FsgModel self, double logp) -> int"""
        return _soundswallower.FsgModel_log(self, logp)


    def get_lw(self):
        """get_lw(FsgModel self) -> float"""
        return _soundswallower.FsgModel_get_lw(self)


    def get_name(self):
        """get_name(FsgModel self) -> char const *"""
        return _soundswallower.FsgModel_get_name(self)


    def get_n_word(self):
        """get_n_word(FsgModel self) -> int"""
        return _soundswallower.FsgModel_get_n_word(self)


    def has_sil(self):
        """has_sil(FsgModel self) -> bool"""
        return _soundswallower.FsgModel_has_sil(self)


    def has_alt(self):
        """has_alt(FsgModel self) -> bool"""
        return _soundswallower.FsgModel_has_alt(self)


    def is_filler(self, wid):
        """is_filler(FsgModel self, int wid) -> bool"""
        return _soundswallower.FsgModel_is_filler(self, wid)


    def is_alt(self, wid):
        """is_alt(FsgModel self, int wid) -> bool"""
        return _soundswallower.FsgModel_is_alt(self, wid)

FsgModel_swigregister = _soundswallower.FsgModel_swigregister
FsgModel_swigregister(FsgModel)

class JsgfRule(_object):
    """Proxy of C JsgfRule struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JsgfRule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JsgfRule, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(JsgfRule self) -> JsgfRule"""
        this = _soundswallower.new_JsgfRule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fromIter(itor):
        """fromIter(void * itor) -> JsgfRule"""
        return _soundswallower.JsgfRule_fromIter(itor)

    fromIter = staticmethod(fromIter)

    def get_name(self):
        """get_name(JsgfRule self) -> char const *"""
        return _soundswallower.JsgfRule_get_name(self)


    def is_public(self):
        """is_public(JsgfRule self) -> bool"""
        return _soundswallower.JsgfRule_is_public(self)

    __swig_destroy__ = _soundswallower.delete_JsgfRule
    __del__ = lambda self: None
JsgfRule_swigregister = _soundswallower.JsgfRule_swigregister
JsgfRule_swigregister(JsgfRule)

def JsgfRule_fromIter(itor):
    """JsgfRule_fromIter(void * itor) -> JsgfRule"""
    return _soundswallower.JsgfRule_fromIter(itor)

class LogMath(_object):
    """Proxy of C LogMath struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogMath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogMath, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(LogMath self) -> LogMath"""
        this = _soundswallower.new_LogMath()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _soundswallower.delete_LogMath
    __del__ = lambda self: None

    def exp(self, prob):
        """exp(LogMath self, int prob) -> double"""
        return _soundswallower.LogMath_exp(self, prob)


    def log(self, prob):
        """log(LogMath self, double prob) -> int"""
        return _soundswallower.LogMath_log(self, prob)


    def add(self, logb_p, logb_q):
        """add(LogMath self, int logb_p, int logb_q) -> int"""
        return _soundswallower.LogMath_add(self, logb_p, logb_q)


    def ln_to_log(self, log_p):
        """ln_to_log(LogMath self, double log_p) -> int"""
        return _soundswallower.LogMath_ln_to_log(self, log_p)


    def log_to_ln(self, logb_p):
        """log_to_ln(LogMath self, int logb_p) -> double"""
        return _soundswallower.LogMath_log_to_ln(self, logb_p)


    def log10_to_log(self, log_p):
        """log10_to_log(LogMath self, double log_p) -> int"""
        return _soundswallower.LogMath_log10_to_log(self, log_p)


    def log_to_log10(self, logb_p):
        """log_to_log10(LogMath self, int logb_p) -> double"""
        return _soundswallower.LogMath_log_to_log10(self, logb_p)


    def log10_to_log_float(self, log_p):
        """log10_to_log_float(LogMath self, double log_p) -> float"""
        return _soundswallower.LogMath_log10_to_log_float(self, log_p)


    def log_float_to_log10(self, log_p):
        """log_float_to_log10(LogMath self, float log_p) -> double"""
        return _soundswallower.LogMath_log_float_to_log10(self, log_p)

LogMath_swigregister = _soundswallower.LogMath_swigregister
LogMath_swigregister(LogMath)

class SegmentIterator(_object):
    """Proxy of C SegmentIterator struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SegmentIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SegmentIterator, name)
    __repr__ = _swig_repr

    def __init__(self, ptr):
        """__init__(SegmentIterator self, void * ptr) -> SegmentIterator"""
        this = _soundswallower.new_SegmentIterator(ptr)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _soundswallower.delete_SegmentIterator
    __del__ = lambda self: None

    def next(self):
        """next(SegmentIterator self) -> Segment"""
        return _soundswallower.SegmentIterator_next(self)


    def __next__(self):
        """__next__(SegmentIterator self) -> Segment"""
        return _soundswallower.SegmentIterator___next__(self)

SegmentIterator_swigregister = _soundswallower.SegmentIterator_swigregister
SegmentIterator_swigregister(SegmentIterator)

class NBestIterator(_object):
    """Proxy of C NBestIterator struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NBestIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NBestIterator, name)
    __repr__ = _swig_repr

    def __init__(self, ptr):
        """__init__(NBestIterator self, void * ptr) -> NBestIterator"""
        this = _soundswallower.new_NBestIterator(ptr)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _soundswallower.delete_NBestIterator
    __del__ = lambda self: None

    def next(self):
        """next(NBestIterator self) -> NBest"""
        return _soundswallower.NBestIterator_next(self)


    def __next__(self):
        """__next__(NBestIterator self) -> NBest"""
        return _soundswallower.NBestIterator___next__(self)

NBestIterator_swigregister = _soundswallower.NBestIterator_swigregister
NBestIterator_swigregister(NBestIterator)

class JsgfIterator(_object):
    """Proxy of C JsgfIterator struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JsgfIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JsgfIterator, name)
    __repr__ = _swig_repr

    def __init__(self, ptr):
        """__init__(JsgfIterator self, void * ptr) -> JsgfIterator"""
        this = _soundswallower.new_JsgfIterator(ptr)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _soundswallower.delete_JsgfIterator
    __del__ = lambda self: None

    def next(self):
        """next(JsgfIterator self) -> JsgfRule"""
        return _soundswallower.JsgfIterator_next(self)


    def __next__(self):
        """__next__(JsgfIterator self) -> JsgfRule"""
        return _soundswallower.JsgfIterator___next__(self)

JsgfIterator_swigregister = _soundswallower.JsgfIterator_swigregister
JsgfIterator_swigregister(JsgfIterator)

class Jsgf(_object):
    """Proxy of C Jsgf struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Jsgf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Jsgf, name)
    __repr__ = _swig_repr

    def __iter__(self):
        """__iter__(Jsgf self) -> JsgfIterator"""
        return _soundswallower.Jsgf___iter__(self)


    def __init__(self, path):
        """__init__(Jsgf self, char const * path) -> Jsgf"""
        this = _soundswallower.new_Jsgf(path)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _soundswallower.delete_Jsgf
    __del__ = lambda self: None

    def get_name(self):
        """get_name(Jsgf self) -> char const *"""
        return _soundswallower.Jsgf_get_name(self)


    def get_rule(self, name):
        """get_rule(Jsgf self, char const * name) -> JsgfRule"""
        return _soundswallower.Jsgf_get_rule(self, name)


    def build_fsg(self, rule, logmath, lw):
        """build_fsg(Jsgf self, JsgfRule rule, LogMath logmath, float lw) -> FsgModel"""
        return _soundswallower.Jsgf_build_fsg(self, rule, logmath, lw)

Jsgf_swigregister = _soundswallower.Jsgf_swigregister
Jsgf_swigregister(Jsgf)

class Decoder(_object):
    """Proxy of C Decoder struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Decoder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Decoder, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Decoder self) -> Decoder
        __init__(Decoder self, Config config) -> Decoder
        """
        this = _soundswallower.new_Decoder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _soundswallower.delete_Decoder
    __del__ = lambda self: None

    def reinit(self, config):
        """reinit(Decoder self, Config config)"""
        return _soundswallower.Decoder_reinit(self, config)


    def load_dict(self, fdict, ffilter, format):
        """load_dict(Decoder self, char const * fdict, char const * ffilter, char const * format)"""
        return _soundswallower.Decoder_load_dict(self, fdict, ffilter, format)


    def save_dict(self, dictfile, format):
        """save_dict(Decoder self, char const * dictfile, char const * format)"""
        return _soundswallower.Decoder_save_dict(self, dictfile, format)


    def add_word(self, word, phones, update):
        """add_word(Decoder self, char const * word, char const * phones, int update)"""
        return _soundswallower.Decoder_add_word(self, word, phones, update)


    def lookup_word(self, word):
        """lookup_word(Decoder self, char const * word) -> char *"""
        return _soundswallower.Decoder_lookup_word(self, word)


    def get_lattice(self):
        """get_lattice(Decoder self) -> Lattice"""
        return _soundswallower.Decoder_get_lattice(self)


    def get_config(self):
        """get_config(Decoder self) -> Config"""
        return _soundswallower.Decoder_get_config(self)


    def default_config():
        """default_config() -> Config"""
        return _soundswallower.Decoder_default_config()

    default_config = staticmethod(default_config)

    def file_config(path):
        """file_config(char const * path) -> Config"""
        return _soundswallower.Decoder_file_config(path)

    file_config = staticmethod(file_config)

    def start_stream(self):
        """start_stream(Decoder self)"""
        return _soundswallower.Decoder_start_stream(self)


    def start_utt(self):
        """start_utt(Decoder self)"""
        return _soundswallower.Decoder_start_utt(self)


    def end_utt(self):
        """end_utt(Decoder self)"""
        return _soundswallower.Decoder_end_utt(self)


    def process_raw(self, SDATA, no_search, full_utt):
        """process_raw(Decoder self, char const * SDATA, bool no_search, bool full_utt) -> int"""
        return _soundswallower.Decoder_process_raw(self, SDATA, no_search, full_utt)


    def process_cep(self, SDATA, no_search, full_utt):
        """process_cep(Decoder self, char const * SDATA, bool no_search, bool full_utt) -> int"""
        return _soundswallower.Decoder_process_cep(self, SDATA, no_search, full_utt)


    def hyp(self):
        """hyp(Decoder self) -> Hypothesis"""
        return _soundswallower.Decoder_hyp(self)


    def get_fe(self):
        """get_fe(Decoder self) -> FrontEnd"""
        return _soundswallower.Decoder_get_fe(self)


    def get_feat(self):
        """get_feat(Decoder self) -> Feature"""
        return _soundswallower.Decoder_get_feat(self)


    def get_in_speech(self):
        """get_in_speech(Decoder self) -> bool"""
        return _soundswallower.Decoder_get_in_speech(self)


    def get_fsg(self, name):
        """get_fsg(Decoder self, char const * name) -> FsgModel"""
        return _soundswallower.Decoder_get_fsg(self, name)


    def set_fsg(self, name, fsg):
        """set_fsg(Decoder self, char const * name, FsgModel fsg)"""
        return _soundswallower.Decoder_set_fsg(self, name, fsg)


    def set_jsgf_file(self, name, path):
        """set_jsgf_file(Decoder self, char const * name, char const * path)"""
        return _soundswallower.Decoder_set_jsgf_file(self, name, path)


    def set_jsgf_string(self, name, jsgf_string):
        """set_jsgf_string(Decoder self, char const * name, char const * jsgf_string)"""
        return _soundswallower.Decoder_set_jsgf_string(self, name, jsgf_string)


    def get_kws(self, name):
        """get_kws(Decoder self, char const * name) -> char const *"""
        return _soundswallower.Decoder_get_kws(self, name)


    def set_kws(self, name, keyfile):
        """set_kws(Decoder self, char const * name, char const * keyfile)"""
        return _soundswallower.Decoder_set_kws(self, name, keyfile)


    def set_keyphrase(self, name, keyphrase):
        """set_keyphrase(Decoder self, char const * name, char const * keyphrase)"""
        return _soundswallower.Decoder_set_keyphrase(self, name, keyphrase)


    def get_logmath(self):
        """get_logmath(Decoder self) -> LogMath"""
        return _soundswallower.Decoder_get_logmath(self)


    def set_search(self, search_name):
        """set_search(Decoder self, char const * search_name)"""
        return _soundswallower.Decoder_set_search(self, search_name)


    def unset_search(self, search_name):
        """unset_search(Decoder self, char const * search_name)"""
        return _soundswallower.Decoder_unset_search(self, search_name)


    def get_search(self):
        """get_search(Decoder self) -> char const *"""
        return _soundswallower.Decoder_get_search(self)


    def n_frames(self):
        """n_frames(Decoder self) -> int"""
        return _soundswallower.Decoder_n_frames(self)


    def seg(self):
        """seg(Decoder self) -> SegmentList"""
        return _soundswallower.Decoder_seg(self)


    def nbest(self):
        """nbest(Decoder self) -> NBestList"""
        return _soundswallower.Decoder_nbest(self)

Decoder_swigregister = _soundswallower.Decoder_swigregister
Decoder_swigregister(Decoder)

def Decoder_default_config():
    """Decoder_default_config() -> Config"""
    return _soundswallower.Decoder_default_config()

def Decoder_file_config(path):
    """Decoder_file_config(char const * path) -> Config"""
    return _soundswallower.Decoder_file_config(path)

class Lattice(_object):
    """Proxy of C Lattice struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lattice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Lattice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Lattice self, char const * path) -> Lattice
        __init__(Lattice self, Decoder decoder, char * path) -> Lattice
        """
        this = _soundswallower.new_Lattice(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _soundswallower.delete_Lattice
    __del__ = lambda self: None

    def write(self, path):
        """write(Lattice self, char const * path)"""
        return _soundswallower.Lattice_write(self, path)


    def write_htk(self, path):
        """write_htk(Lattice self, char const * path)"""
        return _soundswallower.Lattice_write_htk(self, path)

Lattice_swigregister = _soundswallower.Lattice_swigregister
Lattice_swigregister(Lattice)

class NBestList(_object):
    """Proxy of C NBestList struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NBestList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NBestList, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __iter__(self):
        """__iter__(NBestList self) -> NBestIterator"""
        return _soundswallower.NBestList___iter__(self)

    __swig_destroy__ = _soundswallower.delete_NBestList
    __del__ = lambda self: None
NBestList_swigregister = _soundswallower.NBestList_swigregister
NBestList_swigregister(NBestList)

class SegmentList(_object):
    """Proxy of C SegmentList struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SegmentList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SegmentList, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __iter__(self):
        """__iter__(SegmentList self) -> SegmentIterator"""
        return _soundswallower.SegmentList___iter__(self)

    __swig_destroy__ = _soundswallower.delete_SegmentList
    __del__ = lambda self: None
SegmentList_swigregister = _soundswallower.SegmentList_swigregister
SegmentList_swigregister(SegmentList)

# This file is compatible with both classic and new-style classes.


